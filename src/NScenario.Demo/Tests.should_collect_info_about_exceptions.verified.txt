{
  ScenarioTitle: should collect info about exceptions,
  MethodName: should_collect_info_about_exceptions,
  FilePath: {ProjectDirectory}UnitTest1.cs,
  LineNumber: 138,
  Status: Failed,
  Steps: [
    {
      Description: This is the first step,
      LineNumber: 142,
      FilePath: {ProjectDirectory}UnitTest1.cs,
      Status: Failed,
      SubSteps: [
        {
          Description: This is the first sub-step of first step,
          LineNumber: 144,
          FilePath: {ProjectDirectory}UnitTest1.cs,
          Status: Success
        },
        {
          Description: This is the second sub-step of first step,
          LineNumber: 148,
          FilePath: {ProjectDirectory}UnitTest1.cs,
          Status: Failed,
          SubSteps: [
            {
              Description: Yet another nesting level p1,
              LineNumber: 150,
              FilePath: {ProjectDirectory}UnitTest1.cs,
              Status: Failed,
              Exception: {
                $type: InvalidOperationException,
                Type: InvalidOperationException,
                Message: Something wrong,
                Data: {
                  NScenarioHandled: true
                },
                StackTrace:
at NScenario.Demo.Tests.<>c.<should_collect_info_about_exceptions>b__5_4()
at NScenario.StepExecutors.OutputScenarioStepExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.StepExecutors.LevelTrackingScenarioStepExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.StepExecutors.LevelTrackingScenarioStepExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.ScenarioInfoCollectorExecutor.Step(String scenarioName, String stepDescription, MaybeAsyncAction action, StepContext stepContext)
at NScenario.ScenarioInfoCollectorExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.TestScenario.Step(String description, Func`1 action, String filePath, String methodName, Int32 lineNumber)
--- End of stack trace from previous location ---
at NScenario.StepExecutors.OutputScenarioStepExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.StepExecutors.LevelTrackingScenarioStepExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.StepExecutors.LevelTrackingScenarioStepExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.ScenarioInfoCollectorExecutor.Step(String scenarioName, String stepDescription, MaybeAsyncAction action, StepContext stepContext)
at NScenario.ScenarioInfoCollectorExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.TestScenario.Step(String description, Func`1 action, String filePath, String methodName, Int32 lineNumber)
--- End of stack trace from previous location ---
at NScenario.StepExecutors.OutputScenarioStepExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.StepExecutors.LevelTrackingScenarioStepExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.StepExecutors.LevelTrackingScenarioStepExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.ScenarioInfoCollectorExecutor.Step(String scenarioName, String stepDescription, MaybeAsyncAction action, StepContext stepContext)
at NScenario.ScenarioInfoCollectorExecutor.Step(String scenarioName, String stepDescription, Func`1 action, StepContext stepContext)
at NScenario.TestScenario.Step(String description, Func`1 action, String filePath, String methodName, Int32 lineNumber)
at NScenario.Demo.Tests.should_collect_info_about_exceptions()
              }
            }
          ]
        }
      ]
    }
  ]
}